[{"/Users/gordon/Desktop/Shopify Projects/Frontend/movie_awards/src/index.js":"1","/Users/gordon/Desktop/Shopify Projects/Frontend/movie_awards/src/reportWebVitals.js":"2","/Users/gordon/Desktop/Shopify Projects/Frontend/movie_awards/src/App.js":"3","/Users/gordon/Desktop/Shopify Projects/Frontend/movie_awards/src/components/search.jsx":"4"},{"size":500,"mtime":1608747242702,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1608687485392,"results":"7","hashOfConfig":"6"},{"size":603,"mtime":1609870117723,"results":"8","hashOfConfig":"6"},{"size":12137,"mtime":1609879273429,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"16h0lp1",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/gordon/Desktop/Shopify Projects/Frontend/movie_awards/src/index.js",[],["21","22"],"/Users/gordon/Desktop/Shopify Projects/Frontend/movie_awards/src/reportWebVitals.js",[],"/Users/gordon/Desktop/Shopify Projects/Frontend/movie_awards/src/App.js",["23"],"import './App.css';\nimport React, { Component } from 'react'\nimport Search from \"./components/search\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nclass App extends Component {\n  constructor(props) {\n  super(props);\n};\n  render() {\n    return (\n      <React.Fragment>\n        <Router>\n            {/* Switch is used to prevent multiple components from running at once when using routing */}\n            <Switch>\n                <Route  exact path=\"/\" component={Search} />\n            </Switch>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","/Users/gordon/Desktop/Shopify Projects/Frontend/movie_awards/src/components/search.jsx",["24","25","26","27","28","29","30","31","32"],"import React, { Component, Link } from 'react';\nimport axios from 'axios';\nimport '../search.css';\nimport useSessionStorage from 'react-use-sessionstorage';\nimport { fadeOut } from 'react-animations';\nimport Radium, {StyleRoot} from 'radium';\n\n// 1. docstring for all non required / non react included method: https://stackoverflow.com/questions/34205666/utilizing-docstrings\n// 2. delete the console logs\n// 3. const -> let -> never var\n// 4. delete unncessary stuff\n// 5. go over the names, think (WWANTV) what would akil name this variable / would he think this is a good enough name\n// 6. markdown file\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.searchMovie = this.searchMovie.bind(this);\n        this.display = this.display.bind(this);\n        this.condition = this.condition.bind(this);\n        this.nominate = this.nominate.bind(this);\n        this.nominationList = this.nominationList.bind(this);\n        this.removeNomination = this.removeNomination.bind(this);\n        this.state = {\n            inputData:'',\n            movies: {},\n            nominations:[],\n            isNominated: {},\n            isNominee: true,\n            isSearched: false,\n        };\n    };\n\n    componentDidMount() {\n        console.log(\"mounted\");\n        // Allows me to retrieve the nominated movies that were stored in sessionStorage\n        let nominations = JSON.parse(sessionStorage.getItem(\"nominations\"));\n        console.log(\"nominations: \", nominations);\n        // Makes sure a null value isnt pushed to state\n        if(nominations !== null){\n            this.setState({nominations: nominations});\n        }\n    }\n\n    searchMovie(event) {\n        event.preventDefault();\n        let rawTitle= this.movieTitleInput.value;\n        this.setState({InputData: rawTitle});\n        // console.log(\"title: \",rawTitle);\n        let title = rawTitle.replace(' ', '+');\n        // console.log(\"new title: \",title);\n        let apiKey= '&apikey=e36df1a5&'\n        let urlInsertion= \"s=\"+title + apiKey\n        // console.log(\"url: \", urlInsertion);\n        let url= 'http://www.omdbapi.com/?' + urlInsertion\n        \n        axios.get(url) \n        .then((response) => {\n            // console.log(response.data);\n            const movieData=  response.data;\n            // console.log(\"Movie Data: \",movieData);\n            const movies= response.data.Search;\n            // for(let i=0; i<movies.length; i++) {\n\n            // }\n            // ============\n            // const year= movieData.Year;\n            // const newTitle= movieData.Title;\n            // let movie = {title:newTitle, year:year, plot:movieData.Plot, isNominee:false, id:(newTitle+year)};\n            // ===========\n            for(let i=0; i<movies.length;i++) {\n                movies[i].isNominee = false;\n                // var person = {fname:\"John\", lname:\"Doe\", age:25};\n            }\n            // console.log(movies); \n            if(this.state.nominations.length === 0) {\n            // if(this.state.nominations === null) {\n                // this.setState({movie: movie});\n                this.setState({movies: movies});\n            }\n                for(let i=0; i< this.state.nominations.length; i++) {\n                    // console.log(this.state.nominations);\n                    if( this.state.nominations[i].id === movies[i].imdbID) {\n                        console.log(\"here\");\n                        this.setState({isSearched: true});\n                        // this.setState();\n                        this.setState({movie: this.state.nominations[i]}, function() {\n                            console.log (\"current movie: \", this.state.movie);\n                            this.setState({isSearched: true});\n                        });\n                    }else{\n                        console.log(\"else\");\n                        // this.setState({movie: movie});   \n                        this.setState({movies: movies});   \n                    }\n                }\n        });\n    }\n\n    condition(i) {\n        alert('You are limited to 5 nominations');\n    }\n\n    display() {\n        console.log(\"nominations: \", this.state.nominations);\n        // let movie = this.state.movie;\n        let movies = this.state.movies;\n        // console.log(\"movies: \", movies);  \n        let keys= Object.keys(movies);\n        // console.log(\"the keys: \", keys);\n        // console.log(\"keys: \", Object.keys(movies));\n            return(\n                <React.Fragment>\n                    <div className=\"container\">\n                    {Object.keys(movies).map((i, index) => (\n                        <ul> \n                            {/* movies[i].imdbID */}\n                            <li key={movies[i].imdbID} id={movies[i].imdbID}> \n                            <h5 style={{display: 'inline'}}> {movies[i].Title} </h5>\n                            <h5 style={{display: 'inline'}}> ({movies[i].Year})   </h5>\n                            {movies[i].isNominee !== false\n                                ? <p></p>\n                                : <button onClick={() => {if(this.state.nominations.length === 5){this.condition()}else{{this.nominate(i)}}  }} style={{ margin: '8px'}} data-mdb-toggle=\"animation\" data-mdb-animation-reset=\"true\" data-mdb-animation=\"slide-out-right\">Nominate</button> \n                            }\n                            </li>\n                        </ul>\n                    ))}\n                    {movies.isNominee !== false\n                        ? <p></p>\n                        : <button onClick={() => { this.nominate()} } style={{ margin: '8px'}}>Nominate</button> \n                    }\n                    </div>\n                </React.Fragment>\n            );\n        // }\n\n    }\n\n    nominate(i) {\n        // console.log(\"i: \", i);\n        // let movie = this.state.movie;\n        let movies = this.state.movies;\n        // let movies = this.state.movies.Search;\n        // object of movie\n        // console.log(\"movies: \", movies);\n        // this.setState({isNominated: {movie: true}});\n\n        this.setState(prevState => {\n            // creating copy of state variable movie\n            let movies = Object.assign({}, prevState.movies); \n            // update the name property, assign a new value  \n            movies[i].isNominee = true;    \n            // console.log(\"122 movies: \", movies);\n            // return new object movies object to be set to state                         \n            return { movies };                              \n        }, () =>{\n            console.log(\"nominee is updated\");\n            this.updateList(i);\n        });\n    }\n\n    updateList(i) {\n        // let movies = this.state.movies.Search;\n        let movies = this.state.movies;\n        // console.log(\"movie: \", movie);\n        this.setState({ nominations: this.state.nominations.concat([movies[i]])});\n    }\n\n    removeNomination(i) {\n        console.log(\"Is run\");\n        console.log(\"movie: \", i);\n        let index = i;\n        let newList= this.state.nominations;\n        console.log(\"newList: \", newList);\n        // splice used to remove the one value in array starting from index value index\n        newList.splice(index, 1);\n        this.setState({nominations: newList});\n        this.setState(prevState => {\n            // creating copy of state variable movie\n            let movie = Object.assign({}, prevState.movie); \n            // update the name property, assign a new value  \n            movie.isNominee = false;          \n            // return new object movie object to be set to state                         \n            return { movie };                              \n        });\n    }\n    \n    nominationList() {\n        let thisKeyword= this;\n        let array= this.state.nominations;\n        // console.log(\"nomination: \", this.state.nominations, \"typeOf: \", typeof(this.state.nominations));\n\n        let List= []; // WRONG CHANGE THIS\n\n        let len= array.length;\n        // console.log(\"len: \", len);\n        for(let i=0; i<len;i++) {\n            List.push(array[i]);\n        }\n        // console.log(\"List: \", List, typeof(List));\n\n        const styles = {\n            fadeOut: {\n              animation: 'x 1s',\n              animationName: Radium.keyframes(fadeOut, 'fadeOut')\n            }\n        }\n        return(\n            <React.Fragment>\n                 {this.state.nominations.length === 5\n                        ? \n                        // <div class=\"jumbotron jumbotron-fluid\">\n                            <div className=\"container\" style={{backgroundColor: \"#E9ECEF\"}}> \n                                <h5 className=\"display-5\">You have nominated 5 movies</h5>\n                            </div>\n                        // </div>\n                        : <p></p>\n                        }\n\n                 {Object.keys(array).map((i, key) => (\n                    <ul> \n                        {/* The index value of nominated movie is passed to remove nomination function */}\n                        <li data-mdb-animation=\"slide-right\"  key={array[i].imdbID}  id={array[i].imdbID}>  {array[i].Title} \"({array[i].Year})\" </li>\n                        <button onClick={() => {this.removeNomination(i)}} style={{display: 'inline', marginBottom: '8px',fadeOut}}> Remove </button>\n                    </ul>\n                ))}\n            </React.Fragment>\n            // <h1>Hello</h1>\n        );\n    }\n\n    componentDidUpdate() {\n        // Allows me to set a value in sessionStorage so that upon refresh of page the nominated values will remain since they are stored in session storage and can be retrieved\n        sessionStorage.setItem(\"nominations\", JSON.stringify(this.state.nominations));\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div className='container'>\n                    <h1 id=\"container\">The Shoppies</h1>\n                </div>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col\"  id=\"grid\">\n                            <form onSubmit={(event) => { this.searchMovie(event)}}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleInputEmail1\" id=\"title\" style={{marginBottom:\"1px\",display:\"block\"}}>Movie Title</label>\n            {/* \"Enter movie title\" */}\n                                    <input style={{ margin:'0px', display:\"inline\", width: \"96%\"}} type=\"name\" className=\"form-control\" id=\"title\" aria-describedby=\"MovieTitle\" placeholder= \"Enter movie title\"  ref={(input) => { this.movieTitleInput = input }} required></input>\n                                    <button type=\"submit\" className=\"btn btn-primary\" style={{display:\"inline\"}} > <i style={{display:\"inline\"}} className=\"fas fa-search\"></i></button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                    \n                    <div className=\"row\" >\n                        <div className=\"col\" id=\"grid\">\n                        {Object.keys(this.state.movies).length === 0\n                        ? <h2 >Results</h2>\n                        // : <h2 >Results for \"{this.state.movies[i].Title}\"</h2> \n                        // : <h2></h2> \n                        : <h2 >Results for \"{this.state.InputData}\"</h2> \n                        }\n                            {this.display()}\n                        </div>\n                        <div className=\"col\" id=\"grid\">\n                            <h2 id=\"title\" style={{marginBottom: \"0px\"}}>Nominations</h2>\n                            <small style={{marginTop: \"0px\"}}>Only 5 nominations can be made</small>\n                            {/* <button onClick={()=> {this.nominationList()}} type=\"button\" className=\"btn btn-primary\">View nominations</button> */}\n                            {this.nominationList()}\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Search;",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":7,"column":3,"nodeType":"39","messageId":"40","endLine":9,"endColumn":2},{"ruleId":"41","severity":1,"message":"42","line":1,"column":28,"nodeType":"43","messageId":"44","endLine":1,"endColumn":32},{"ruleId":"41","severity":1,"message":"45","line":4,"column":8,"nodeType":"43","messageId":"44","endLine":4,"endColumn":25},{"ruleId":"41","severity":1,"message":"46","line":6,"column":17,"nodeType":"43","messageId":"44","endLine":6,"endColumn":26},{"ruleId":"41","severity":1,"message":"47","line":60,"column":19,"nodeType":"43","messageId":"44","endLine":60,"endColumn":28},{"ruleId":"41","severity":1,"message":"48","line":109,"column":13,"nodeType":"43","messageId":"44","endLine":109,"endColumn":17},{"ruleId":"49","severity":1,"message":"50","line":123,"column":121,"nodeType":"51","messageId":"52","endLine":123,"endColumn":139},{"ruleId":"41","severity":1,"message":"53","line":142,"column":13,"nodeType":"43","messageId":"44","endLine":142,"endColumn":19},{"ruleId":"41","severity":1,"message":"54","line":189,"column":13,"nodeType":"43","messageId":"44","endLine":189,"endColumn":24},{"ruleId":"41","severity":1,"message":"55","line":202,"column":15,"nodeType":"43","messageId":"44","endLine":202,"endColumn":21},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useSessionStorage' is defined but never used.","'StyleRoot' is defined but never used.","'movieData' is assigned a value but never used.","'keys' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'movies' is assigned a value but never used.","'thisKeyword' is assigned a value but never used.","'styles' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]